@model SacramentMeetingPlanner.Models.Meeting

@{
    ViewData["Title"] = "Delete Meeting";
}



<!-- Breadcrumb -->
<nav class="flex px-5 py-3 my-4 text-gray-700 border border-amber-300 rounded-lg bg-amber-50">
    <ol class="inline-flex items-center space-x-1 md:space-x-3">
        <li class="inline-flex items-center">
            <a href="/" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 ">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z">
                    </path>
                </svg>
                Home
            </a>
        </li>
        <li>
            <div class="flex items-center">
                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd"
                        d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                        clip-rule="evenodd"></path>
                </svg>
                <a asp-action="Index"
                    class="ml-1 text-sm font-medium text-gray-700 hover:text-gray-900 md:ml-2 ">Meetings</a>
            </div>
        </li>
        <li aria-current="page">
            <div class="flex items-center">
                <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd"
                        d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                        clip-rule="evenodd"></path>
                </svg>
                <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2 ">@ViewData["Title"]</span>
            </div>
        </li>
    </ol>
</nav>







<div class="bg-amber-50 shadow overflow-hidden sm:rounded-lg mb-12">
    <div class="flex flex-col p-4  bg-red-100 rounded-lg rounded-b-none w-full sm:justify-between sm:flex-row">
        <div>
            <div class="flex items-center">
                <svg aria-hidden="true" class="mr-2 w-5 h-5 text-red-700 " fill="currentColor" viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd"
                        d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                        clip-rule="evenodd"></path>
                </svg>
                <span class="sr-only"></span>
                <h3 class="text-lg font-medium text-red-700">Deleting @Html.DisplayFor(model => model.MeetingDate)
                    meeting</h3>
            </div>
            <div class="mt-2 mb-4 text-sm text-red-700 pl-2">
                Are you sure you want to delete this?
            </div>
        </div>
        <div class="flex flex-row mt-1 sm:mt-0">
            <form asp-action="Delete" class="mt-2">
                <input type="hidden" asp-for="ID" />
                <input type="submit" value="Delete Meeting" class="text-xs uppercase h-10 w-48 btn btn-list text-white bg-red-700  hover:bg-red-800 font-medium 
                text-center items-center" />
            </form>
            <a class="h-10 w-48 btn btn-list  bg-white px-2 hover:bg-amber-200 font-medium  text-xs uppercase
                text-center items-center pt-3" asp-action="Index">Back to List</a>
        </div>
    </div>
    <div class="border-t border-gray-200">
        <dl>
            <div class="bg-amber-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500">Meeting Date</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Html.DisplayFor(model =>
                    model.MeetingDate) </dd>
            </div>
            <div class="bg-amber-100 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500"> @Html.DisplayNameFor(model => model.Member)</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Html.DisplayFor(model =>
                    model.Member.FullName)</dd>
            </div>
            <div class="bg-amber-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500"> @Html.DisplayNameFor(model => model.OpeningHymn)</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Html.DisplayFor(model =>
                    model.OpeningHymn)</dd>
            </div>
            <div class="bg-amber-100 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500">Opening Prayer</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"> @Html.DisplayFor(model =>
                    model.Participants.ElementAt(0).Member.FullName)</dd>
            </div>
            <div class="bg-amber-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500"> @Html.DisplayNameFor(model => model.SacramentHymn)</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Html.DisplayFor(model =>
                    model.SacramentHymn)</dd>
            </div>
            @{
                int speakers = Model.Participants.Count - 2;
                if (speakers == 0)
                {
                    <div class="even:bg-amber-100 odd:bg-amber-50  px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                        <dt class="text-sm font-medium text-gray-500">Testimony Meeting</dt>
                        <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">Open to the Congregation.</dd>
                    </div>
                }
                else
                {
                    int splitSpeakers = -1;
                    if (Model.IntermediateNumber != null)
                    {
                        splitSpeakers = (speakers - 1) / 2;
                    }
                    for (int i = 0; i < speakers; i++)
                    {
                        <div class="even:bg-amber-100 odd:bg-amber-50  px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">Speaker</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Html.DisplayFor(model =>
                    model.Participants.ElementAt(i + 2).Member.FullName)</dd>
                        </div>


                        <div class="even:bg-amber-100 odd:bg-amber-50  px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                            <dt class="text-sm font-medium text-gray-500">@Html.DisplayNameFor(model =>
                    model.Participants.ElementAt(i + 2).Topic)</dt>
                            <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"> @Html.DisplayFor(model =>
                    model.Participants.ElementAt(i + 2).Topic)</dd>
                        </div>
                        if (i == splitSpeakers)
                        {
                            <div class="even:bg-amber-100 odd:bg-amber-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500"> @Html.DisplayNameFor(model => model.IntermediateNumber)
                                </dt>
                                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"> @Html.DisplayFor(model =>
                    model.IntermediateNumber)</dd>
                            </div>
                        }
                    }
                }
            }
            <div class="bg-amber-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500"> @Html.DisplayNameFor(model => model.ClosingHymn)</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">@Html.DisplayFor(model =>
                    model.ClosingHymn)</dd>
            </div>
            <div class="bg-amber-100 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt class="text-sm font-medium text-gray-500">Closing Prayer</dt>
                <dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"> @Html.DisplayFor(model =>
                    model.Participants.ElementAt(1).Member.FullName)</dd>
            </div>
        </dl>
    </div>
</div>





















































@*
    <div>
    <h4 class="header h4">Meeting Info</h4>
    <hr />
    <dl class="row">
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.MeetingDate)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.MeetingDate)
    </dd>
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.Member)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.Member.FullName)
    </dd>
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.OpeningHymn)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.OpeningHymn)
    </dd>
    <dt class="col-sm-2">
    Opening Prayer
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.Participants.ElementAt(0).Member.FullName)
    </dd>
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.SacramentHymn)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.SacramentHymn)
    </dd>
    @{
    speakers = Model.Participants.Count - 2;
    if (speakers == 0)
    {
    <dt class="col-sm-2">
    Testimony Meeting
    </dt>
    <dd class="col-sm-10">
    Open to the Congregation.
    </dd>
    }
    else
    {
    int splitSpeakers = -1;
    if (Model.IntermediateNumber != null)
    {
    splitSpeakers = speakers / 2;
    }
    for (int i = 0; i < speakers; i++)
    {
    <dt class="col-sm-2">
    Speaker
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.Participants.ElementAt(i + 2).Member.FullName)
    </dd>
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.Participants.ElementAt(i + 2).Topic)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.Participants.ElementAt(i + 2).Topic)
    </dd>
    if (i == splitSpeakers)
    {
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.IntermediateNumber)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.IntermediateNumber)
    </dd>
    }
    }
    }
    }
    <dt class="col-sm-2">
    @Html.DisplayNameFor(model => model.ClosingHymn)
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.ClosingHymn)
    </dd>
    <dt class="col-sm-2">
    Closing Prayer
    </dt>
    <dd class="col-sm-10">
    @Html.DisplayFor(model => model.Participants.ElementAt(1).Member.FullName)
    </dd>
    </dl>

    <form asp-action="Delete">
    <input type="hidden" asp-for="ID" />
    <input type="submit" value="Delete Meeting" class="btn btn-danger" />
    <a class="btn btn-list" asp-action="Index">Back to List</a>
    </form>
    </div> *@
